# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cDZLtEW3UpfRy2-YsIVz2Jb3APzUEo2H
"""

# autovisory_app.py
import streamlit as st
import pandas as pd
import google.generativeai as genai
import json
import re

# ==============================================================================
# PAGE CONFIGURATION
# ==============================================================================
st.set_page_config(
    page_title="Autovisory AI Demo",
    page_icon="🚗",
    layout="centered",
    initial_sidebar_state="auto"
)

# ==============================================================================
# API AND MODEL CONFIGURATION
# ==============================================================================
try:
    # Load API Key from Streamlit Secrets
    genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
    # Using Flash for speed, cost-effectiveness, and a large context window.
    model = genai.GenerativeModel('gemini-1.5-flash')
except Exception:
    st.error("Could not configure Google AI. Have you set the GOOGLE_API_KEY in Streamlit secrets?", icon="🚨")
    st.stop()

# ==============================================================================
# DATA LOADING (with Caching for performance)
# ==============================================================================
@st.cache_data # Important: Caches the data to avoid reloading on every interaction
def load_data():
    try:
        # These are your larger, optimized sample files now
        df_new_us = pd.read_csv('Data/sample_new_us_cars.csv')
        df_used_us = pd.read_csv('Data/sample_used_us_cars.csv')
        df_used_europe = pd.read_csv('Data/sample_used_europe_cars.csv')
        return df_new_us, df_used_us, df_used_europe
    except FileNotFoundError:
        st.error("Sample data files not found. Please ensure the 'Data' folder with your sample CSVs is in the repository.", icon="🚨")
        return None, None, None

# Load the data. The app will only proceed if the files are found.
df_new_us_master, df_used_us_master, df_used_europe_master = load_data()
if df_new_us_master is None:
    st.stop()


# ==============================================================================
# ----------------- YOUR COPIED AI HELPER FUNCTIONS ------------------------
# ==============================================================================

def determine_next_action(history, user_query):
    history_str = "\n".join([f"{h['role']}: {h['parts']}" for h in history])
    prompt = f"""
    You are Autovisory, a helpful, expert, and impartial AI assistant specializing exclusively in cars. Your primary mission is to be a trusted advisor, guiding users through the complexities of buying and understanding cars. You are not a salesperson; your advice is objective and always centered on the user's needs.

    Step 1: Initial Query Assessment
    First, analyze the user's query.
    If the query is about anything NOT related to cars (e.g., movies, weather, politics, recipes), you MUST respond only with the following JSON object and nothing else:
    {{"action": "reject", "response": "I'm here to help only with car-related questions. Could you ask something about cars?"}}
    If the query is car-related, proceed to Step 2 to determine the user's intent.

    Step 2: Intent-Based Action Protocol
    Decide the user's intent and follow the corresponding protocol precisely.
    Intent: clarify
    Condition: The user's query is vague, unclear, or they state they don't know where to start (e.g., "What car should I buy?", "I need a new car").
    Action: Your goal is to understand their needs. Ask a series of clarifying questions to gather essential information. Do not suggest any cars yet. Your response should be a friendly set of questions.
    Questions to Ask:
    "To give you the best recommendation, I need a little more information. Could you tell me about:"
    "1. Budget: What is your approximate budget for the car?"
    "2. Primary Use: What will you mainly be using it for (like daily commuting, family trips, or off-roading)?"
    "3. Passengers: How many people will you typically need to carry?"
    "4. Priorities: What are the top 3 most important things for you in a car (e.g., fuel efficiency, safety, performance, reliability, cargo space, latest tech)?"
    "5. Lifestyle: Do you have any specific needs, like carrying pets, sports gear, or needing to tow anything?"
    Intent: recommend
    Condition: The user has provided enough information for a recommendation, either in their initial query or after you've clarified.
    Action: Suggest 2-3 well-suited car models. For each suggestion, provide a brief, compelling summary explaining why it fits their stated needs. Mention key strengths related to their priorities.
    Example Output Structure: "Based on your need for a fuel-efficient family car under $30,000, here are a couple of great options:
    Honda CR-V: It's known for its outstanding reliability and has a huge, practical interior, making it perfect for family duties. Its fuel economy is also excellent for its class.
    Toyota RAV4 Hybrid: This would be a top choice for maximizing fuel efficiency. It also comes standard with many safety features and has a strong reputation for holding its value."
    Intent: analyze
    Condition: The user wants information on a specific car model (e.g., "Tell me about the 2024 Ford Mustang," "What do you know about the Kia Telluride?").
    Action: Provide a comprehensive yet easy-to-digest overview of the vehicle.
    Information to Include:
    Summary: A brief paragraph on what the car is and who it's for.
    Pros: List 3-4 key strengths (e.g., "Powerful engine options," "High-quality interior," "Excellent safety scores").
    Cons: List 3-4 key weaknesses (e.g., "Poor rear visibility," "Below-average fuel economy for its class," "Stiff ride").
    Key Specifications: Mention engine choices, horsepower, fuel economy (MPG/L/100km), and drivetrain options.
    Safety & Reliability: Reference ratings from trusted sources like the IIHS or NHTSA if available.
    Intent: compare
    Condition: The user wants to compare two or more car models (e.g., "Honda Civic vs. Toyota Corolla," "Compare the F-150 and the Silverado").
    Action: Create a structured, direct comparison. A side-by-side table is highly effective. After the table, provide a concluding summary.
    Comparison Points: Always include Price Range, Fuel Economy, Performance (engine/HP), Interior/Cargo Space, and Safety/Reliability Ratings. Add other points as relevant (e.g., Towing Capacity for trucks, EV Range for electric cars).
    Concluding Summary: Briefly state which car is better for different types of buyers. (e.g., "The Civic may be better for those who prioritize a fun driving experience, while the Corolla is a top choice for those focused on maximum reliability and comfort.")
    Intent: answer_general
    Condition: The user has a general knowledge question about cars, brands, or technology (e.g., "What's the difference between a hybrid and a PHEV?", "Are Kia cars reliable?", "What is a CVT?").
    Action: Provide a clear, accurate, and simple explanation. Avoid overly technical jargon. Your goal is to educate the user.

    Step 3: Overarching Guiding Principles (Apply to all car-related responses)
    Impartiality: Never show bias towards a brand. Always present a balanced view.
    Safety First: Always prioritize safety. Highlight vehicles with strong safety ratings.
    Data-Driven: When citing safety or reliability, you can mention the source (e.g., "According to the IIHS...").
    No Financial Advice: You can discuss a car's price (MSRP), but do not advise a user on what they can afford or how to finance a vehicle.
    Honesty: If you don't have specific information, state that it's unavailable rather than guessing.
    If the use say thank you or thank you for help. Then reply with welcome and ask they need more help of not.

    USER QUERY: "{user_query}"
    Conversation History:\n{history_str}
    Return only valid JSON.
    """
    for attempt in range(2):
        try:
            response = model.generate_content(prompt)
            # A robust way to clean potential markdown and get to the JSON
            text = re.search(r'\{.*\}', response.text, re.DOTALL).group(0)
            return json.loads(text)
        except (json.JSONDecodeError, AttributeError):
            # If JSON parsing fails or regex finds nothing, try again.
            continue
    return {"action": "error", "response": "Sorry, I had trouble understanding the request. Could you rephrase?"}


def extract_car_models(text):
    # This regex is designed to be more specific to car models
    pattern = r'(?:\b(?:vs|versus|compare|between|and)\b\s)?([A-Z][a-zA-Z0-9-]+\s(?:[A-Z][a-zA-Z0-9-]+-?)+|[A-Z][a-zA-Z0-9-]+\s[A-Z][a-zA-Z0-9-]+|[A-Z][a-zA-Z0-9-]+)'
    models = re.findall(pattern, text)
    # Post-processing to remove common words that are not models
    stop_words = {'Compare', 'Between', 'And', 'The', 'A'}
    return [model.strip() for model in models if model.strip() not in stop_words]


def get_recommendations_and_analysis(full_context_query):
    # CRITICAL CHANGE: This function now ONLY generates a prompt.
    # It does not touch DataFrames. This is the AI's job.
    prompt = f"""
    You're an expert AI Car Analyst. Based on the user's request, recommend 3 cars and provide a brief analysis for each.

    FULL CONVERSATION CONTEXT:
    {full_context_query}

    You have access to three datasets in your knowledge base: new US cars, used US cars, and used European cars.

    INSTRUCTIONS:
    1.  Carefully analyze the user's budget, priorities, and needs from the context.
    2.  Select 3 car models from your knowledge that are the best fit.
    3.  For each car, provide a compelling summary and an estimated price range based on the user's new/used preference.
    4.  You MUST respond in a valid, structured JSON object like this example. Do not add any text before or after the JSON.

    EXAMPLE JSON RESPONSE:
    {{
      "recommendations": [
        {{
          "make": "Toyota",
          "model": "Camry",
          "summary": "The Toyota Camry is a fantastic choice for its legendary reliability, excellent fuel economy, and strong safety scores. It's a comfortable and practical midsize sedan that holds its value well.",
          "estimated_price": "$25,000 - $35,000 (New)"
        }},
        {{
          "make": "Honda",
          "model": "CR-V",
          "summary": "For a versatile SUV, the Honda CR-V is a top contender. It offers a massive cargo area, great fuel efficiency for its class, and a reputation for being dependable and family-friendly.",
          "estimated_price": "$28,000 - $38,000 (New)"
        }},
        {{
          "make": "Ford",
          "model": "F-150",
          "summary": "If the user needs a used truck, the Ford F-150 is the market leader. It's known for its wide range of configurations, strong towing capacity, and a comfortable ride.",
          "estimated_price": "$25,000 - $40,000 (Used, 3-5 years old)"
        }}
      ]
    }}
    """
    try:
        response = model.generate_content(prompt)
        text = re.search(r'\{.*\}', response.text, re.DOTALL).group(0)
        return json.loads(text)
    except Exception as e:
        return {"error": str(e), "recommendations": []}


def compare_cars_with_ai(full_context_query):
    prompt = f"""
    You are a car expert AI. The user is trying to decide between two or more vehicles.
    Based on this conversation, create a side-by-side comparison.

    FULL CONVERSATION CONTEXT:
    {full_context_query}

    INSTRUCTIONS:
    1. Identify the car models the user wants to compare.
    2. Provide a brief summary for each model.
    3. List 2-3 key strengths and 2-3 key weaknesses for each.
    4. Respond ONLY with a valid JSON object like the example below.

    EXAMPLE JSON RESPONSE:
    {{
      "comparison": [
        {{
          "model": "Honda Civic",
          "summary": "A compact car known for its sporty handling, fuel efficiency, and high reliability ratings. It's a great all-rounder for singles or small families.",
          "strengths": ["Fun-to-drive dynamics", "Excellent fuel economy", "High resale value"],
          "weaknesses": ["Road noise can be high at speed", "Base model is light on features"]
        }},
        {{
          "model": "Toyota Corolla",
          "summary": "The Corolla's reputation is built on reliability, comfort, and safety. It prioritizes a smooth ride and ease of use over sporty performance.",
          "strengths": ["Legendary reliability", "Standard safety features", "Comfortable ride"],
          "weaknesses": ["Uninspired engine performance", "Less engaging to drive than rivals"]
        }}
      ]
    }}
    """
    try:
        response = model.generate_content(prompt)
        text = re.search(r'\{.*\}', response.text, re.DOTALL).group(0)
        return json.loads(text)
    except Exception as e:
        return {"error": str(e), "comparison": []}


def analyze_specific_car_model(car_model):
    prompt = f"""
    You are an expert automotive analyst. Give a clear, concise analysis of the following car model.

    MODEL TO ANALYZE: "{car_model}"

    INSTRUCTIONS:
    1.  Provide a one-paragraph overview of what the car is known for.
    2.  List 3 distinct pros and 3 distinct cons.
    3.  Describe the target audience for this vehicle.
    4.  Provide a typical market price range.
    5.  Respond ONLY in the following valid JSON format.

    EXAMPLE JSON RESPONSE:
    {{
      "model": "Tesla Model Y",
      "overview": "The Tesla Model Y is a fully electric compact SUV that has become incredibly popular for its blend of long-range capability, cutting-edge technology, and impressive performance. It shares many components with the Model 3 sedan but offers more practicality with its hatchback design and available third-row seat.",
      "pros": ["Impressive real-world battery range", "Access to Tesla's reliable Supercharger network", "Quick acceleration and nimble handling"],
      "cons": ["Stiff ride quality, especially on larger wheels", "Reliance on the touchscreen for most controls can be distracting", "Build quality can be inconsistent compared to legacy automakers"],
      "audience": "Tech-savvy individuals and families looking for a practical EV with a focus on performance and access to the best charging infrastructure.",
      "price_estimate_usd": "$45,000 - $60,000"
    }}
    """
    try:
        response = model.generate_content(prompt)
        text = re.search(r'\{.*\}', response.text, re.DOTALL).group(0)
        return json.loads(text)
    except Exception as e:
        return {"error": str(e)}


# ==============================================================================
# STREAMLIT CHAT UI
# ==============================================================================
st.title("🚗 Autovisory AI")
st.caption("Your AI-Powered Car Market Analyst (Live Demo)")

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "assistant", "content": "Hello! I'm Autovisory. Ask me to recommend, compare, or analyze a car."}]

# Display chat messages
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# React to user input
if prompt := st.chat_input("What would you like to know?"):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        with st.spinner("Thinking..."):
            # Prepare history for the AI model
            gemini_history = [{"role": "user" if msg["role"] == "user" else "model", "parts": [msg["content"]]} for msg in st.session_state.messages]

            action_data = determine_next_action(gemini_history, prompt)
            action = action_data.get("action", "error")
            response_content = ""

            # This logic block handles the different AI actions
            if action in ["reject", "clarify", "answer_general"]:
                response_content = action_data.get("response", "I'm not sure how to respond. Please try rephrasing.")

            elif action == "recommend":
                full_context = "\n".join([f"{msg['role']}: {msg['content']}" for msg in st.session_state.messages])
                recs = get_recommendations_and_analysis(full_context)
                if recs.get("recommendations"):
                    response_content = "Based on your preferences, here are 3 solid options:\n"
                    for r in recs["recommendations"]:
                        response_content += f"\n### 🚗 {r.get('make')} {r.get('model')}\n"
                        response_content += f"- **Summary**: {r.get('summary', 'N/A')}\n"
                        response_content += f"- **Estimated Price**: {r.get('estimated_price', 'N/A')}\n"
                else:
                    response_content = "Sorry, I couldn't find good options with the provided details. Could you be more specific?"

            elif action == "analyze":
                candidates = extract_car_models(prompt)
                model_name = candidates[0] if candidates else ""
                if model_name:
                    analysis = analyze_specific_car_model(model_name)
                    if analysis.get("model"):
                        response_content = f"### Analysis of the {analysis['model']}\n"
                        response_content += f"**📘 Overview:** {analysis['overview']}\n\n"
                        response_content += "**✅ Pros:**\n"
                        for pro in analysis['pros']:
                            response_content += f"- {pro}\n"
                        response_content += "\n**⚠️ Cons:**\n"
                        for con in analysis['cons']:
                            response_content += f"- {con}\n"
                        response_content += f"\n**👥 Ideal For:** {analysis['audience']}\n"
                        response_content += f"**💰 Estimated Price:** {analysis['price_estimate_usd']}"
                    else:
                        response_content = "Sorry, I couldn't analyze that model. Please be more specific."
                else:
                    response_content = "I couldn't identify a specific car model to analyze. Please try again."

            elif action == "compare":
                full_context = "\n".join([f"{msg['role']}: {msg['content']}" for msg in st.session_state.messages])
                result = compare_cars_with_ai(full_context)
                if result.get("comparison"):
                    response_content = "Here's a comparison of your choices:\n"
                    for car in result["comparison"]:
                        response_content += f"\n### 🚘 {car['model']}\n"
                        response_content += f"- **Summary**: {car.get('summary', 'N/A')}\n"
                        response_content += f"- **✅ Strengths**: {', '.join(car.get('strengths', []))}\n"
                        response_content += f"- **⚠️ Weaknesses**: {', '.join(car.get('weaknesses', []))}\n"
                else:
                    response_content = "Sorry, I couldn't generate a comparison. Please mention at least two models clearly."

            else:
                response_content = action_data.get("response", "I encountered an issue. Please try again.")

            st.markdown(response_content)
            st.session_state.messages.append({"role": "assistant", "content": response_content})